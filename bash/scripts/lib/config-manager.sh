#!/usr/bin/env bash

# Configuration Manager
# AWS Multi-Account Bootstrap
#
# Handles configuration loading with mode-based precedence:
#
# Interactive Mode:
#   1. CLI/Makefile args
#   2. Config file (YAML → JSON)
#   3. Interactive prompts
#
# CI Mode:
#   1. CLI/Makefile args
#   2. Environment variables
#   3. Config file (YAML → JSON)
#   4. ERROR if missing

set -e

# Source UI helpers
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=scripts/lib/ui-helpers.sh
source "$SCRIPT_DIR/ui-helpers.sh"

# ============================================================================
# Configuration File Detection
# ============================================================================

detect_config_file() {
    # Check for YAML first, then JSON
    if [ -f ".aws-bootstrap.yml" ]; then
        echo ".aws-bootstrap.yml"
    elif [ -f ".aws-bootstrap.yaml" ]; then
        echo ".aws-bootstrap.yaml"
    elif [ -f ".aws-bootstrap.json" ]; then
        echo ".aws-bootstrap.json"
    else
        echo ""
    fi
}

get_config_file_type() {
    local file=$1
    case "$file" in
        *.yml|*.yaml)
            echo "yaml"
            ;;
        *.json)
            echo "json"
            ;;
        *)
            echo "unknown"
            ;;
    esac
}

# ============================================================================
# Configuration Value Parsing
# ============================================================================

parse_config_value() {
    local key=$1
    local config_file=$2
    local file_type
    file_type=$(get_config_file_type "$config_file")

    case "$file_type" in
        yaml)
            if command -v yq &> /dev/null; then
                yq eval ".${key} // empty" "$config_file" 2>/dev/null || echo ""
            else
                # yq not available - silently skip YAML parsing
                echo ""
            fi
            ;;
        json)
            if command -v jq &> /dev/null; then
                jq -r ".${key} // empty" "$config_file" 2>/dev/null || echo ""
            else
                # jq not available - shouldn't happen since jq is required
                echo ""
            fi
            ;;
        *)
            echo ""
            ;;
    esac
}

# ============================================================================
# Mode Detection
# ============================================================================

detect_mode() {
    # If explicitly set, use it
    if [ -n "$BOOTSTRAP_MODE" ]; then
        echo "$BOOTSTRAP_MODE"
        return
    fi

    # Auto-detect based on environment
    if [ -n "$CI" ] || [ -n "$GITHUB_ACTIONS" ] || [ -n "$GITLAB_CI" ]; then
        echo "ci"
    else
        echo "interactive"
    fi
}

# ============================================================================
# Configuration Value Resolution
# ============================================================================

get_config() {
    local key=$1
    local cli_value=$2
    local mode
    mode=$(detect_mode)
    local config_file
    config_file=$(detect_config_file)
    local result=""

    # Priority 1: CLI/Makefile argument (both modes)
    if [ -n "$cli_value" ]; then
        echo "$cli_value"
        return
    fi

    if [ "$mode" = "ci" ]; then
        # CI Mode: Check env vars, then config file, then fail

        # Priority 2: Environment variable
        local env_var="BOOTSTRAP_${key}"
        if [ -n "${!env_var}" ]; then
            echo "${!env_var}"
            return
        fi

        # Priority 3: Config file
        if [ -n "$config_file" ]; then
            result=$(parse_config_value "$key" "$config_file")
            if [ -n "$result" ]; then
                echo "$result"
                return
            fi
        fi

        # No fallback in CI mode - return empty (caller will error)
        echo ""

    else
        # Interactive Mode: Check config file, then will prompt

        # Priority 2: Config file (for default value)
        if [ -n "$config_file" ]; then
            result=$(parse_config_value "$key" "$config_file")
            if [ -n "$result" ]; then
                echo "$result"
                return
            fi
        fi

        # Return empty - caller will prompt with this as default
        echo ""
    fi
}

# ============================================================================
# Configuration File Saving
# ============================================================================

save_config_file() {
    local format=$1
    shift
    local -n config_data=$1

    case "$format" in
        yaml)
            cat > .aws-bootstrap.yml <<EOF
# AWS Multi-Account Bootstrap Configuration
# Generated by setup wizard

PROJECT_CODE: ${config_data[PROJECT_CODE]}
EMAIL_PREFIX: ${config_data[EMAIL_PREFIX]}
OU_ID: ${config_data[OU_ID]}
GITHUB_ORG: ${config_data[GITHUB_ORG]}
REPO_NAME: ${config_data[REPO_NAME]}
EOF
            echo ".aws-bootstrap.yml"
            ;;
        json)
            cat > .aws-bootstrap.json <<EOF
{
  "PROJECT_CODE": "${config_data[PROJECT_CODE]}",
  "EMAIL_PREFIX": "${config_data[EMAIL_PREFIX]}",
  "OU_ID": "${config_data[OU_ID]}",
  "GITHUB_ORG": "${config_data[GITHUB_ORG]}",
  "REPO_NAME": "${config_data[REPO_NAME]}"
}
EOF
            echo ".aws-bootstrap.json"
            ;;
        *)
            error "Unknown config format: $format"
            return 1
            ;;
    esac
}

save_config_prompt() {
    local -n config_data=$1

    echo ""
    info "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    info "  Save Configuration"
    info "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "Would you like to save this configuration for future runs?"
    echo ""
    echo "This will create a config file with your settings so you don't"
    echo "have to re-enter them next time."
    echo ""

    local choice
    read -p "Save configuration? (y/n): " -n 1 -r choice
    echo ""

    if [[ ! $choice =~ ^[Yy]$ ]]; then
        info "Configuration not saved"
        return 0
    fi

    echo ""
    echo "Choose format:"
    echo "  1) YAML (.aws-bootstrap.yml) - Human-friendly, comments supported"
    echo "  2) JSON (.aws-bootstrap.json) - Simple, widely supported"
    echo ""

    local format_choice
    read -p "Format (1/2): " -n 1 -r format_choice
    echo ""

    local format
    case "$format_choice" in
        1)
            format="yaml"
            ;;
        2)
            format="json"
            ;;
        *)
            warning "Invalid choice. Defaulting to YAML."
            format="yaml"
            ;;
    esac

    local saved_file
    saved_file=$(save_config_file "$format" config_data)

    echo ""
    success "✓ Configuration saved to $saved_file"
    echo ""
    info "Tip: Add this file to version control (it contains no secrets)"
    info "     Sensitive values like OU_ID can be set via environment variables"
    echo ""
}

# ============================================================================
# Configuration Validation
# ============================================================================

validate_project_code() {
    local code=$1

    # Must be exactly 3 characters
    if [ ${#code} -ne 3 ]; then
        return 1
    fi

    # Must be alphanumeric
    if [[ ! $code =~ ^[A-Z0-9]{3}$ ]]; then
        return 1
    fi

    return 0
}

validate_email_prefix() {
    local email=$1

    # Basic email validation
    if [[ ! $email =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        return 1
    fi

    return 0
}

validate_ou_id() {
    local ou_id=$1

    # Must start with ou- and have the right format
    if [[ ! $ou_id =~ ^ou-[a-z0-9]+-[a-z0-9]+$ ]]; then
        return 1
    fi

    return 0
}

# ============================================================================
# Helper Functions
# ============================================================================

show_config_info() {
    local config_file
    config_file=$(detect_config_file)

    if [ -n "$config_file" ]; then
        local file_type
        file_type=$(get_config_file_type "$config_file")
        success "✓ Found configuration file: $config_file ($file_type)"
    else
        info "ℹ No configuration file found"
        info "  You can create .aws-bootstrap.yml or .aws-bootstrap.json"
    fi
}