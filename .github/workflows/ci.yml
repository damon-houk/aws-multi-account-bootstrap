name: CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  lint-scripts:
    name: Lint Bash Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './bash/scripts'
          severity: warning

  lint-makefile:
    name: Validate Makefile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Makefile syntax
        run: make --dry-run check-prerequisites || true

  lint-docs:
    name: Check Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          config-file: '.github/markdown-link-check-config.json'

  test-bash:
    name: Bash Tests (v1)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run bash tests
        run: |
          cd bash/tests
          ./test-config-simple.sh

  test-go:
    name: Go Tests (v2)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Run Go tests
        run: |
          cd go
          go test ./... -race -timeout 30s

  validate-structure:
    name: Validate Project Structure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check required files
        run: |
          set -e
          echo "Checking required files for monorepo structure..."

          # Root files
          required_files=(
            "README.md"
            "LICENSE"
            "Makefile"
            "CLAUDE.md"
          )

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done

          # v1 (bash) files
          echo ""
          echo "Checking v1 (bash) structure..."
          bash_files=(
            "bash/README.md"
            "bash/scripts/setup-complete-project.sh"
            "bash/scripts/create-project-accounts.sh"
            "bash/scripts/bootstrap-cdk.sh"
            "bash/scripts/setup-github-cicd.sh"
            "bash/scripts/setup-github-repo.sh"
            "bash/scripts/setup-billing-alerts.sh"
          )

          for file in "${bash_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing bash file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done

          # v2 (go) files
          echo ""
          echo "Checking v2 (go) structure..."
          go_files=(
            "go/README.md"
            "go/Makefile"
            "go/go.mod"
          )

          for file in "${go_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing go file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done

      - name: Check script permissions
        run: |
          echo "Checking script permissions..."
          for script in bash/scripts/*.sh; do
            if [ ! -x "$script" ]; then
              echo "⚠️  Script not executable: $script"
              chmod +x "$script"
            else
              echo "✅ Executable: $script"
            fi
          done

  validate-templates:
    name: Validate IaC Templates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check template structure
        run: |
          echo "Validating IaC template structure..."

          # Check if templates directory exists
          if [ ! -d "templates" ]; then
            echo "ℹ️  No templates directory found (v1.0 - templates not yet added)"
            echo "✅ Validation passed (templates will be added in v1.1+)"
            exit 0
          fi

          echo "✅ Templates directory found"

          # Check for legacy structure (v1.0): templates/infrastructure/
          if [ -d "templates/infrastructure" ]; then
            echo ""
            echo "ℹ️  Found legacy CDK template structure (v1.0)"
            echo "   Checking for required files..."

            required_files=(
              "templates/infrastructure/bin/app.ts"
              "templates/infrastructure/lib/.gitkeep"
            )

            for file in "${required_files[@]}"; do
              if [ ! -f "$file" ]; then
                echo "❌ Missing: $file"
                exit 1
              fi
              echo "✅ Found: $file"
            done

            echo "✅ Legacy template structure valid"
            exit 0
          fi

          # Check for new structure (v1.1+): templates/{cdk,terraform,pulumi}/minimal/
          echo ""
          echo "Checking for multi-IaC template structure (v1.1+)..."

          template_count=0
          for iac_dir in templates/*/; do
            if [ -d "$iac_dir" ]; then
              iac_tool=$(basename "$iac_dir")
              echo ""
              echo "Checking $iac_tool templates..."

              # Each IaC tool should have at least a minimal template
              if [ ! -d "${iac_dir}minimal" ]; then
                echo "❌ Missing minimal template for $iac_tool"
                echo "   Expected: ${iac_dir}minimal/"
                exit 1
              fi

              echo "✅ $iac_tool templates valid"
              ((template_count++))
            fi
          done

          if [ $template_count -eq 0 ]; then
            echo ""
            echo "⚠️  Templates directory exists but has no recognized structure"
            echo "   Expected either:"
            echo "   - Legacy (v1.0): templates/infrastructure/"
            echo "   - Multi-IaC (v1.1+): templates/{cdk,terraform,pulumi}/minimal/"
            exit 1
          fi

          echo ""
          echo "✅ All template structures valid ($template_count IaC tool(s) configured)"
